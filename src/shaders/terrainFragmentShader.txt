#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

// Textures
uniform sampler2D blendMap;
uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;

uniform vec3 lightColor;
uniform float reflectivity;
uniform float shineDamper;
uniform vec3 skyColor;

void main(void){
	
	// blend map
	vec4 blendMapColor = texture(blendMap, pass_textureCoords);
	float bgTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	vec2 tiledCoords = pass_textureCoords * 160;
	vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * bgTextureAmount;
	vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
	vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
	vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
	
	vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;
	
	// diffuse and basic ambient lighting
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	float brightness = max(dot(unitNormal, unitLightVector), 0.15);
	vec3 diffuse = brightness * lightColor;
	
	// specular lighting
	vec3 reflectedLightDirection = reflect(-unitLightVector, unitNormal);
	vec3 unitCameraVector = normalize(toCameraVector);
	float specularFactor = max(dot(reflectedLightDirection, unitCameraVector), 0.0);
	float dampFactor = pow(specularFactor, shineDamper);
	vec3 specular = reflectivity * dampFactor * lightColor;

	out_Color = vec4(diffuse,1.0) * totalColor + vec4(specular,1.0);
	out_Color = mix(vec4(skyColor,1.0), out_Color, visibility);

}