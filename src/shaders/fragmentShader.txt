#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float reflectivity;
uniform float shineDamper;
uniform vec3 skyColor;

void main(void){
	
	// diffuse and decent ambient lighting
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	float brightness = max(dot(unitNormal, unitLightVector), 0.0);
	brightness = brightness * 8 / 10 + 0.2;
	vec3 diffuse = brightness * lightColor;
	
	// specular lighting
	vec3 reflectedLightDirection = reflect(-unitLightVector, unitNormal);
	vec3 unitCameraVector = normalize(toCameraVector);
	float specularFactor = max(dot(reflectedLightDirection, unitCameraVector), 0.0);
	float dampFactor = pow(specularFactor, shineDamper);
	vec3 specular = reflectivity * dampFactor * lightColor;
	
	// transparency
	vec4 textureColor = texture(textureSampler,pass_textureCoords);
	if(textureColor.a<0.5f){
		discard;
	}

	out_Color = vec4(diffuse,1.0) * textureColor + vec4(specular,1.0);
	out_Color = mix(vec4(skyColor,1.0), out_Color, visibility);

}